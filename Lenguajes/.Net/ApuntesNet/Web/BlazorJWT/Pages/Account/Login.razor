@page "/authentication/login"
@using BlazorJWT.SharedApiDTO.Request
@using BlazorJWT.SharedApiDTO.Response
@attribute [AllowAnonymous]
@inject NavigationManager Navigation

<div class="login">
    <div class="panel panel-default  login-content">

        <div class="panel-body">

            <div class="">
            </div>
            <div class="col-md-7">
                <h3 class="col-md-12 text-secondary margin-bottom margin-top">LOGIN</h3>

                <EditForm Model="_loginRequest" class="margin-top" method="post" OnSubmit="EnviarLogin">
                    <div class="col-md-12 form-group ">
                        <label class="control-label">Usuario</label>
                        <input type="text" @bind-value="_loginRequest.UserName" class="form-control input-lg">
                    </div>
                    <div class="col-md-12 form-group">
                        <label class="control-label">Contraseña</label>
                        <input type="password" @bind-value="_loginRequest.Password" class="form-control input-lg">
                    </div>

                    <div class="row col-md-12 form-group">
                        <div class="text-center col-md-2 col-md-offset-4">
                            <button id="btnentrarlogin" type="submit" class="btn bg-secondary text-white">ENTRAR</button>
                        </div>
                    </div>
                </EditForm>

            </div>
        </div>
    </div>
</div>

@code {
    [Parameter] public string? ReturnUrl { get; set; }


    [Inject]
    private IHttpClientFactory? HttpClientFactory { get; set; }
    [Inject]
    private AuthenticationStateProvider LogInProvider{ get; set; }

    private LoginRequest _loginRequest = new();

    private async void EnviarLogin()
    {
        var httpClient = HttpClientFactory.CreateClient("API-CleanArchitecture");
        var loginResponse = await httpClient.PostAsJsonAsync("user/Login", _loginRequest);
        var jwt = await loginResponse.Content.ReadFromJsonAsync<JsonWebToken>();

        await ((AuthenticationProvider)LogInProvider).SetAuthenticationAsync(jwt.Token);

        Navigation.NavigateTo(ReturnUrl ?? "/");
    }
}
